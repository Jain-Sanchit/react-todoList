{"version":3,"sources":["components/TodoFrom.js","components/Todo.js","components/TodosList.js","App.js","serviceWorker.js","index.js"],"names":["TodoFrom","addTodo","useState","id","task","completed","todo","setTodo","onSubmit","e","preventDefault","trim","uuid","type","onChange","target","value","name","className","placeholder","Todo","toggleCompleted","removeTodo","style","display","textDecoration","color","onClick","TodosList","todos","listStyle","margin","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAwCeA,MArCf,YAA8B,IAAXC,EAAU,EAAVA,QAAU,EACHC,mBAAS,CAC/BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJc,mBACpBC,EADoB,KACdC,EADc,KAoB3B,OACE,6BACE,0BAAMC,SAXS,SAACC,GAChBA,EAAEC,iBACCJ,EAAKF,KAAKO,SACTV,EAAQ,2BAAIK,GAAL,IAAUH,GAAIS,iBAErBL,EAAQ,2BAAID,GAAL,IAAUF,KAAK,SAOxB,2BACES,KAAK,OACLC,SAlBY,SAACL,GACnBF,EAAQ,2BAAKD,GAAN,IAAYF,KAAMK,EAAEM,OAAOC,UAkB5BA,MAAOV,EAAKF,KACZa,KAAK,OACLC,UAAU,YACVC,YAAY,oBAEd,4BAAQN,KAAK,SAASK,UAAU,WAAhC,iBCJOE,MA5Bf,YAAqD,IAArCd,EAAoC,EAApCA,KAAMe,EAA8B,EAA9BA,gBAAiBC,EAAa,EAAbA,WASrC,OACE,yBAAKC,MAAO,CAAEC,QAAS,QAAUN,UAAU,aACzC,wBACEK,MAAO,CACLE,eAAgBnB,EAAKD,UAAY,eAAiB,KAClDqB,MAAO,SAETR,UAAU,OAETZ,EAAKF,MAER,yBAAKc,UAAU,QACb,2BAAOL,KAAK,WAAWc,QApBP,WACpBN,EAAgBf,EAAKH,KAmB8Be,UAAU,WACzD,4BAAQS,QAjBK,WACfL,EAAWhB,EAAKH,KAgBiBe,UAAU,WAAzC,QCLOU,MAjBf,YAA6D,IAAxCC,EAAuC,EAAvCA,MAAOR,EAAgC,EAAhCA,gBAAkBC,EAAc,EAAdA,WAC5C,OACE,6BACE,wBAAIC,MAAO,CAACO,UAAU,OAAQC,OAAQ,QAASb,UAAU,OACtDW,EAAMG,KAAI,SAAC1B,GAAD,OACT,kBAAC,EAAD,CACE2B,IAAK3B,EAAKH,GACVG,KAAMA,EACNe,gBAAiBA,EACjBC,WAAYA,UC0CTY,MA7Cf,WAAgB,IAAD,EACWhC,mBAAS,IADpB,mBACN2B,EADM,KACCM,EADD,KAoCb,OAjCAC,qBAAU,WACR,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QANvB,eAOjBJ,GACDF,EAASE,KAEX,IAEFD,qBAAU,WACRI,aAAaE,QAbO,aAamBJ,KAAKK,UAAUd,MACtD,CAACA,IAyBD,yBAAKX,UAAU,OACb,yBAAKA,UAAU,WAAf,cACA,kBAAC,EAAD,CAAUjB,QAzBE,SAACK,GACd6B,EAAS,CAAC7B,GAAF,mBAAUuB,QAyBjB,kBAAC,EAAD,CAAWA,MAAOA,EAAOR,gBAtBN,SAAClB,GACrBgC,EACEN,EAAMG,KAAI,SAAA1B,GACR,OAAGA,EAAKH,KAAOA,EACN,2BACDG,GADN,IAEGD,WAAYC,EAAKD,YAGfC,OAaiDgB,WAR7C,SAACnB,GAChBgC,EAAUN,EAAMe,QAAO,SAAAtC,GAAI,OAAIA,EAAKH,KAAOA,WC7B5B0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b6bbe952.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {v4 as uuid} from \"uuid\";\n\nfunction TodoFrom({addTodo}) {\n  const [todo, setTodo] = useState({\n    id: \"\",\n    task: \"\",\n    completed: false,\n  });\n\n  const handleInput = (e) => {\n    setTodo({ ...todo, task: e.target.value });\n  };\n\n  const handleSubmit=(e)=>{\n      e.preventDefault()\n      if(todo.task.trim()){\n          addTodo({...todo,id: uuid()})\n\n          setTodo({...todo,task:\"\"})\n      }\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={handleInput}\n          value={todo.task}\n          name=\"task\"\n          className=\"input-box\"\n          placeholder=\"Enter a task...\"\n        />\n        <button type=\"submit\" className=\"add-btn\"> Add Task </button>\n      </form>\n    </div>\n  );\n}\n\nexport default TodoFrom;\n","import React from 'react'\n\nfunction Todo({ todo, toggleCompleted ,removeTodo}) {\n  const checkboxClick = () => {\n    toggleCompleted(todo.id)\n  };\n  \n  const handleRemove=()=>{\n      removeTodo(todo.id)\n  }\n\n  return (\n    <div style={{ display: \"flex\" }} className=\"list-item\">\n      <li\n        style={{\n          textDecoration: todo.completed ? \"line-through\" : null,\n          color: \"white\",\n        }}\n        className=\"itm\"\n      >\n        {todo.task}\n      </li>\n      <div className=\"btns\">\n        <input type=\"checkbox\" onClick={checkboxClick} className=\"chkbox\" />\n        <button onClick={handleRemove} className=\"del-btn\">X</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo'\nfunction TodosList({ todos, toggleCompleted , removeTodo }) {\n  return (\n    <div>\n      <ul style={{listStyle:\"none\", margin: \"25px\"}} className=\"ull\">\n        {todos.map((todo) => (\n          <Todo\n            key={todo.id}\n            todo={todo}\n            toggleCompleted={toggleCompleted}\n            removeTodo={removeTodo}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TodosList\n","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\nimport TodoFrom from './components/TodoFrom';\nimport TodosList from './components/TodosList';\n\nconst LOCAL_STORAGE_KEY=\"react-todo\"\n\nfunction App() {\n  const [todos, setTodos]=useState([]);\n\n  useEffect(()=>{\n    const storageTodos=JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))\n    if(storageTodos){\n      setTodos(storageTodos)\n    }\n  },[])\n\n  useEffect(()=>{\n    localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(todos))\n  },[todos])\n\n   const addTodo =(todo)=>{\n     setTodos([todo,...todos]);\n   }\n\n   const toggleCompleted=(id)=>{\n     setTodos(\n       todos.map(todo =>{\n         if(todo.id === id){\n           return {\n              ...todo,\n              completed: !todo.completed\n           };\n         }\n         return todo;\n       })\n     )\n   }\n\n   const removeTodo=(id)=>{\n     setTodos( todos.filter(todo => todo.id !== id))\n   }\n\n  return (\n    <div className=\"App\">\n      <div className=\"heading\">React Todo</div>\n      <TodoFrom addTodo={addTodo} />\n      <TodosList todos={todos} toggleCompleted={toggleCompleted} removeTodo={removeTodo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}